ZIG YOU LEFT OFF HERE

Goal is a table of regexes that can parse daily and master writ quest condition text.
Goal is NOT a translation table of set/trait/whatever strings.

Need REGEXes:
    Given a sealed master writ condition text:
    -- get requested crafting item, AS A STRING
    -- get requested crafting material AS A STRING
    -- get requested quality AS A STRING
    -- get requested trait AS A STRING
    -- get requested set bonus AS A STRING
    -- get requested motif AS A STRING

    Now, use the above strings to help you craft language-specific regexes that
    can parse daily and master craft condition text and return above values, AS
    STRINGS.

    Later, work on on-demand generators that can convert the above strings to
    useful numeric values (basically move DiscoverXXX() functions into the main
    lua file as public API, with different API and with lazy caching because
    hokey smokes some of those loops are expensive.

TEST-DRIVEN-DEVELOPMENT time!
    need `make test` to run hundreds of strings through API
    and verify output.

    Test scaffolding could use lang_db.lua as a replacement for JIT-scrape
    of the same tables from runtime ZOS code: just seed the JIT cache BEFORE
    running test loops.

SPLIT item table into bs/lgt/med/ww/jw
    use actual master writ item numbers not ordinals
    return correct ordinals as part of ParseXX() functions


LIVE confirmation of BS Helm
    master writ base text      daily quest      forge
en  Helm                       Helm
de  haube                      hauben
fr  casque                     heaume           heaume

|H1:item:119680:6:1:0:0:0:44:188:4:41:18:34:0:0:0:0:0:0:0:0:57500|h|h
Rubedite helm
epic
divines
Whitestrakes Retribution
Imperial

Ayep. French uses DIFFERENT words for the same Rubedite Headwear, "casque" and "heaume", depending on where you are. The master writ base text seems iffy. If I _accept_ a master writ quest for a BS Headpiece "casque", what happens to its condition text once absorbed? Still says "casque" not "heaume"

I could walk up to the forge and other stations and gather names from API, I think.

, [44] = { item_id = 44, item_name = "Rubedite Helm",               school = HVY, base_mat_ct = 13, trait_set = ARMOR , research_line = HVY.HEAD,           motif_page = PG.HELMETS  , dol_pattern_index = 11 }

When docked at a BS station:

GetSmithingPatternResultLink(
      number patternIndex
    , number materialIndex
    , number materialQuantity
    , number itemStyleId
    , number traitIndex
    , number LinkStyle linkStyle
    )

GetSmithingPatternResultLink(11, 1, 5, 1) ==> "Heaume en Fer"
GetSmithingPatternResultLink(11,31,13, 1) ==> "Heaume en Galatite"
GetSmithingPatternResultLink(11,41,13, 1) ==> "Heaume en Cuprite"

So ayep, sure enough, the master writ base text and condition text both ask for one thing, but the daily writ cond text and the smithing API use another. I'm gonna call this a translation bug in the ESO client and patch around it.

So I need MORE discovery code: have a listener active for a crafting station attach, and then roll through the 14 or so craftable items. That'll be a hardcoded API table. Record the results in "items_from_station".


    -- get alchemy potion/poison name AS A STRING
    -- get alchemy potion/poison level AS A STRING
    -- get alchemy effect list, AS A STRING list
    -- get enchant level AS A STRING
    -- get enchant name AS A STRING
    -- get food/drink name AS A STRING
    Given a DAILY writ condition, same as above but likely DIFFERENT regexes:

All these string tables that I'm fetching by programmatically rolling through
sealed master writs? I can do that at user runtime, too.
-- PRO table: flat, easy to understand just by reading, cannot have bugs
    (but can have stale text)
-- CON table: won't match updated text: requires zig time to update
-- CON table: consumes space on load instead of space on use.


Now, from those strings, get some sort of integer/constant.
THAT is where having tables of gear names, sets, materials, styles, all come in
handy. Which of those can be generated at runtime?


2018-10-30 22:58:00 -0700
Okay, with that 4-hour detour over, I now have a SECOND set of item names and pattern_index numbers and they all work and pass tests.

But the language files "en.lua" are getting long and cluttered and it's really
confusing to decide which lists to use and such. And the lists aren't flat.
It's all a mess now.

Part of me wants to flatten into a single list of item records, and then within
each record, list the crafting pattern_index and name, the master writ  writ1
number and name, the crafting_type, the gear weight (if any)




The only reason I'm playing with SEALED MASTER WRIT item_links is that it's easy
to write code to fabricate and iterate through them to see different values.
These values are likely to appear in QUEST CONDITION text later, so having tables
of them around in translation database can accelerate hand-work when calculating
regex strings. Especially for languages I cannot easily read (RU I'm looking at you).

Questions:
    -- do I really need lists of materials?


NEED SEALED MASTER WRITE ITEM LINKS FOR
-- HVY "rubedite Cuirass"
-- LGT "ancestor silk Arm Cops"
-- WW  "ruby ash Inferno Staff"
-- JW  "platinum Necklace"

Make sure that new .ToItemName() function works for all items, all languages

Use above output to figure out internal regex that will remove material name from item name.

-- continue on to other gear writ fields
    -- trait
    -- quality (get all 5 even though master writs only need last two)
    -- style/motif
    -- materials (bs, lgt, med, ww, jw)

Use the above to generate tables
Do NOT generate tables for set, style
Might have better way to get trait, I think there's an API for that


The

trying to extract "Cuirass" from "platinum Cuirass"

which implies some modified scan of items from sealed master write itemlinks
-- get proper BS/CL/WW/JW writ links?
-- use known material that you can scan for
-- probably burn the RE strings into a table within _Discover.lua's Discover() code rather than adding to lang_db because these are NOT the same RE strings that you use to scan quest conditions.

Will eventually get a list of craftable gear items

-- sets (already got that!)
-- quality (got that, could roll qualities 1-5 for grins)
-- traits
-- motif

-- probably should NOT add these to generated lang files: they are all
-- available from the ESO client at runtime. Could supply a function
-- to return them, given a writN number

-- ItemName(number) -> "Cuirass"
-- MaterialName(qual, crafting_type) -> "Ruby Ash"
-- Quality(level) -> "Epic"
-- Set(num) -> "Armor Master"
-- Motif(num) -> "Worm Cult"

-- Glyph
-- Alchemy item
-- Alchemy effect
-- Provisioning Item

Use these very same functions to power Discover()
But again, this is num->text generation which is the opposite of parse.
There's no reason to include these in lang files
And including them in public API is Feature Creep don't do it.

But including them in Discovery() might be helpful as we figure out parse
REs for quest text? Barely. But I _am_ curious. So I'm doing it.




---
PTS 2018-11 Characters

EP 10 hammer-meets-thumb
DC  1 ziggr-alt-one   1A=2018-11-01
AD  2 ziggr-alt-two   2A=2018-11-01
EP  3 ziggr-alt-three 3A=2018-11-01

Summerset home is near crafting stations, Jewelry (Felarian) and Consumables (Danel) writ certifier. Bought.
Equipment (Millenith) certifier is near Summerset wayshrine.
